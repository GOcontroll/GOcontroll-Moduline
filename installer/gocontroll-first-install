#!/bin/bash

# url to bash this script:
# wget -O - https://raw.githubusercontent.com/GOcontroll/GOcontroll-Moduline/bullseye/installer/gocontroll-first-install | bash -s bullseye

YELLOW='\033[33m'
NORMAL='\033[0m'

cd 

if [ -d GOcontroll ]
then
echo -e "${YELLOW}-Delete existing GOcontroll folder ${NORMAL}"
	rm -r GOcontroll
fi

echo -e "${YELLOW}-Create new GOcontroll folder ${NORMAL}"
mkdir GOcontroll

cd GOcontroll
ls

if ! [ -x "$(command -v git)" ]; then
echo -e "${YELLOW}-Git is not yet installed so let's install first ${NORMAL}"
apt -y install git 
fi

echo -e "${YELLOW}-Update debian ${NORMAL}"
apt-get update -y

echo -e "${YELLOW}-Download files for GOcontroll Moduline ${NORMAL}"
git clone https://github.com/Rick-GO/GOcontroll-Moduline.git --branch $1

echo -e "${YELLOW}-remove old GOcontroll stuff ${NORMAL}"

if [ -d /usr/node-red-gocontroll/nodes ]
then
echo -e "${YELLOW}-Delete existing GOcontroll nodes ${NORMAL}"
	rm -r /usr/node-red-gocontroll/nodes
fi

if [ -d /usr/node-red-static ]
then
echo -e "${YELLOW}-Delete node red static folder ${NORMAL}"
	rm -r /usr/node-red-static
fi

if [ -d /usr/module-firmware ]
then
echo -e "${YELLOW}-Delete old module firmware ${NORMAL}"
	rm -r /usr/module-firmware 
fi

# if [ -d /usr/moduline/bash ]
# then
# echo -e "${YELLOW}-Delete bash automation scripts ${NORMAL}"
# 	rm -r /usr/moduline/bash 
# fi

# if [ -d /usr/moduline/nodejs ]
# then
# echo -e "${YELLOW}-Delete nodejs scripts ${NORMAL}"
# 	rm -r /usr/moduline/nodejs 
# fi

echo -e "${YELLOW}-Copy GOcontroll files to correct location ${NORMAL}"
cp -avr /root/GOcontroll/GOcontroll-Moduline/lib /
cp -avr /root/GOcontroll/GOcontroll-Moduline/etc /
cp -avr /root/GOcontroll/GOcontroll-Moduline/usr /
cp -avr /root/GOcontroll/GOcontroll-Moduline/root /
cp -avr /root/GOcontroll/GOcontroll-Moduline/version.txt /root

if [[ $(tr -d '\0' < /sys/firmware/devicetree/base/hardware) == "Moduline Mini V1.03" ]] ||
[[ $(tr -d '\0' < /sys/firmware/devicetree/base/hardware) == "Moduline Mini V1.04" ]]||
[[ $(tr -d '\0' < /sys/firmware/devicetree/base/hardware) == "Moduline Mini V1.05" ]]||
[[ $(tr -d '\0' < /sys/firmware/devicetree/base/hardware) == "Moduline Mini V1.06" ]]; then

echo -e "${YELLOW}-Apply patches for Moduline Mini ${NORMAL}"
patch /usr/node-red-gocontroll/nodes/bridge_module.html ~/GOcontroll/GOcontroll-Moduline/patch/bridge_module_html.patch
patch /usr/node-red-gocontroll/nodes/output_module.html ~/GOcontroll/GOcontroll-Moduline/patch/output_module_html.patch
patch /usr/node-red-gocontroll/nodes/input_module_reset.html ~/GOcontroll/GOcontroll-Moduline/patch/input_module_reset_html.patch
patch /usr/node-red-gocontroll/nodes/input_module.html ~/GOcontroll/GOcontroll-Moduline/patch/input_module_html.patch
patch /usr/node-red-gocontroll/nodes/can_receive.html ~/GOcontroll/GOcontroll-Moduline/patch/can_receive_html.patch
patch /usr/node-red-gocontroll/nodes/can_send.html ~/GOcontroll/GOcontroll-Moduline/patch/can_send_html.patch

fi

echo -e "${YELLOW}-Assign correct execution rights to files ${NORMAL}"
chmod 555 /usr/moduline/bash/go-simulink.sh
chmod 555 /usr/moduline/bash/go-wwan-start.sh
chmod 555 /usr/moduline/bash/go-wwan-stop.sh
chmod 555 /usr/moduline/bash/go-gps-start.sh
chmod 555 /usr/moduline/bash/go-gps-stop.sh
#chmod 555 /usr/moduline/bash/identify.sh
chmod 555 /usr/local/bin/qmi-network-raw
chmod 555 /usr/moduline/bash/go-bluetooth-start.sh
chmod 555 /usr/moduline/nodejs/upload-server.js
#chmod 555 /usr/moduline/nodejs/flash-led.js

#alias identify="/usr/moduline/bash/identify.sh"

echo -e "${YELLOW}-Make resolv.conf immutable ${NORMAL}"
chattr +i /etc/resolv.conf

echo -e "${YELLOW}-Create memory allocation folder ${NORMAL}"
mkdir /usr/mem-sim

echo -e "${YELLOW}-Deploy kernel modules ${NORMAL}"
depmod

echo -e "${YELLOW}-Activate Services for wifi ${NORMAL}"
service dnsmasq start


# echo -e "${YELLOW}-Jump node Node RED folder on root ${NORMAL}"
# cd ~/.node-red

# echo -e "${YELLOW}-Install GOcontroll node packages ${NORMAL}"

# It seems that NPM not always installs AND builds the dependencies again. It is important to delete
# the node modules first and then also delete the package.lock.json file!
# https://stackoverflow.com/questions/18401606/npm-doesnt-install-module-dependencies

# npm install --unsafe-perm /usr/node-red-gocontroll

# echo -e "${YELLOW}-Install Node-RED dashboard ${NORMAL}"
# npm remove --no-audit --no-update-notifier --no-fund --save node-red-dashboard
# npm install --no-audit --no-update-notifier --no-fund --save --save-prefix=~ --production --engine-strict node-red-dashboard@3.1.2
# # deprecated way of installing node red dashboard.
# # npm install node-red-dashboard@3.1.2

# echo -e "${YELLOW}-Install Node-RED serial port ${NORMAL}"
# npm remove --no-audit --no-update-notifier --no-fund --save node-red-node-serialport
# npm install --no-audit --no-update-notifier --no-fund --save --save-prefix=~ --production --engine-strict node-red-node-serialport@0.15.0
# # deprecated way of installing serial port.
# # npm install node-red-node-serialport@0.15.0

# cd /usr/moduline/nodejs

# #npm install

echo -e "${YELLOW}-Autostart Node-RED ${NORMAL}"
systemctl enable nodered
systemctl restart nodered

echo -e "${YELLOW}-Start upload server ${NORMAL}"
systemctl enable go-upload-server
systemctl start go-upload-server

echo -e "${YELLOW}-Start bluetooth service ${NORMAL}"
systemctl enable go-bluetooth

echo -e "${YELLOW}-Set time zone ${NORMAL}"
timedatectl set-timezone Europe/Luxembourg

echo -e "${YELLOW}-Fix network manager connections ${NORMAL}"

if [ ! -f "/etc/NetworkManage/system-connections/Wired connnection auto.nmconnection" ]
then
	 nmcli con mod "Wired connection 1" con-name "Wired connection auto"
fi

if [ ! -f "/etc/NetworkManage/system-connections/Wired connection static.nmconnection" ]
then
	nmcli con add type ethernet con-name "Wired connection static" ifname eth0 ipv4.addresses 192.168.255.255/16 ipv4.method manual connection.autoconnect no
fi

if [ ! -f "/etc/NetworkManage/system-connections/GOcontroll-ap.nmconnection" ]
then
	nmcli con add type wifi con-name "GOcontroll-ap" ifname wlan0 ssid GOcontroll-ap ipv4.addresses 192.168.2.85/16 ipv4.method manual connection.autoconnect no 802-11-wireless.mode ap 802-11-wireless.band bg wifi-sec.psk GOcontrolltest 802-11-wireless-security.key-mgmt wpa-psk
fi

if [ ! -f "/etc/NetworkManage/system-connections/GO-celular.nmconnection" ]
then
	nmcli connection add type gsm ifname 'cdc-wdm0' con-name 'GO-celular' apn 'super' connection.autoconnect yes gsm.pin 0000
fi

python3 /usr/moduline/python/installModuleFirmware.py

echo -e "${YELLOW}-Generating a bluetooth verification code ${NORMAL}"

if [ ! -f "/etc/bluetooth/trusted_devices.txt" ]
then
	mkdir /etc/bluetooth
	choose() { echo ${1:RANDOM%${#1}:1} $RANDOM; }
	pass="$({ for i in $( seq 1 $(( 12 + RANDOM % 4 )) )
		do
			choose '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^\&'
		done
	} | sort -R | awk '{printf "%s",$1}')"
	#TODO also send this pass to the label printer
	echo "$pass" > /etc/bluetooth/trusted_devices.txt
fi
 
echo -e "${YELLOW}-Controller ready ${NORMAL}"
echo -e "${YELLOW}-A quick reboot is advised ${NORMAL}"
#test
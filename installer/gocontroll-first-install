#!/bin/bash

# command for development installation
# wget -O /tmp/install https://raw.githubusercontent.com/GOcontroll/GOcontroll-Moduline/master/installer/gocontroll-first-install; bash /tmp/install master

# command for latest stable release:
# release=$(curl -s https://api.github.com/repos/GOcontroll/GOcontroll-Moduline/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")') bash -c 'wget -O /tmp/install https://raw.githubusercontent.com/GOcontroll/GOcontroll-Moduline/$release/installer/gocontroll-first-install; bash /tmp/install $release'

YELLOW='\033[33m'
NORMAL='\033[0m'

cd /root

function check_serial_number {
	if [[ ${#1} != 19 ]]
	then
		echo "Invalid serial number entered, it should be 19 characters long xxxx-xxxx-xxxx-xxxx"
		false
	else
		IFS='-' read -r -a serial_segments <<< "$1"

		if [[ ${#serial_segments[@]} != 4 ]]
		then
			echo "Invalid serial number entered, it should have 4 segments seperated by dashes xxxx-xxxx-xxxx-xxxx"
			false
		else
			for segment in "${serial_segments[@]}"
			do
				if [[ ${#segment} != 4 ]]
				then
					echo "Invalid serial number entered, each segment should be 4 characters xxxx-xxxx-xxxx-xxxx"
					false
				fi
			done
			true
		fi
	fi
}

if check_serial_number $2
then
	serial_number="$2"
else
	while :
	do
		read -p 'Serial number: ' serial_number

		if check_serial_number $serial_number
		then
			break
		fi
	done	
fi

if [ -d GOcontroll ]
then
echo -e "${YELLOW}-Delete existing GOcontroll folder ${NORMAL}"
	rm -r GOcontroll > /dev/null
fi

echo -e "${YELLOW}-Create new GOcontroll folder ${NORMAL}"
mkdir GOcontroll

cd GOcontroll

echo -e "${YELLOW}-Download files for GOcontroll Moduline ${NORMAL}"
curl -L -k -s https://github.com/GOcontroll/GOcontroll-Moduline/tarball/$1 -o repo.tgz
tar -xf repo.tgz
rm repo.tgz


echo -e "${YELLOW}-remove old GOcontroll stuff ${NORMAL}"

if [ -d /usr/node-red-gocontroll/nodes ]
then
echo -e "${YELLOW}-Delete existing GOcontroll nodes ${NORMAL}"
	rm -r /usr/node-red-gocontroll/nodes > /dev/null
fi

if [ -d /usr/node-red-static ]
then
echo -e "${YELLOW}-Delete node red static folder ${NORMAL}"
	rm -r /usr/node-red-static > /dev/null
fi

if [ -d /usr/module-firmware ]
then
echo -e "${YELLOW}-Delete old module firmware ${NORMAL}"
	rm -r /usr/module-firmware > /dev/null
fi

if [ -d /usr/moduline/bash ]
then
echo -e "${YELLOW}-Delete bash automation scripts ${NORMAL}"
	rm /usr/moduline/bash/* > /dev/null
fi

if [ -d /usr/moduline/nodejs ]
then
echo -e "${YELLOW}-Delete nodejs scripts ${NORMAL}"
	rm /usr/moduline/nodejs/* > /dev/null
fi

echo -e "${YELLOW}-Copy GOcontroll files to correct location ${NORMAL}"
cp -avr /root/GOcontroll/GOcontroll*/lib / > /dev/null
cp -avr /root/GOcontroll/GOcontroll*/etc / > /dev/null
cp -avr /root/GOcontroll/GOcontroll*/usr / > /dev/null
cp -avr /root/GOcontroll/GOcontroll*/root / > /dev/null
cp -avr /root/GOcontroll/GOcontroll*/home / > /dev/null
cp -avr /root/GOcontroll/GOcontroll*/version.txt /root > /dev/null

source /root/.bashrc

echo -e "${YELLOW}-Assign correct execution rights to files ${NORMAL}"
chmod 555 /usr/moduline/bash/go-simulink.sh
chmod 555 /usr/moduline/bash/go-wwan-start.sh
chmod 555 /usr/moduline/bash/go-wwan-stop.sh
chmod 555 /usr/moduline/bash/reset-ap.sh
chmod 555 /usr/moduline/python/identify.py
chmod 555 /usr/moduline/bash/go-bluetooth-start.sh
chmod 555 /usr/moduline/nodejs/flash-led.js
chmod 555 /usr/moduline/python/testLeds.py
chmod 555 /usr/moduline/nodejs/connectivity-guard.js
chmod 555 /usr/moduline/bin/go-modules
chmod 555 /usr/moduline/bin/go-upload-server
chmod 555 /usr/moduline/bin/go-sn

go-sn w $serial_number

echo -e "${YELLOW}-Update debian sources ${NORMAL}"
apt-get update -y > /dev/null

echo -e "${YELLOW}-Make resolv.conf immutable ${NORMAL}"
chattr +i /etc/resolv.conf

echo -e "${YELLOW}-Create memory allocation folder ${NORMAL}"
mkdir /usr/mem-sim

echo -e "${YELLOW}-Deploy kernel modules ${NORMAL}"
depmod
modprobe brcmfmac

echo -e "${YELLOW}-Activate Services for wifi ${NORMAL}"
service dnsmasq start

echo -e "${YELLOW}-Autostart Node-RED ${NORMAL}"
systemctl enable nodered > /dev/null
systemctl restart nodered > /dev/null

echo -e "${YELLOW}-Start upload server ${NORMAL}"
systemctl enable go-upload-server > /dev/null
systemctl start go-upload-server > /dev/null

echo -e "${YELLOW}-Start bluetooth service ${NORMAL}"
systemctl enable go-bluetooth > /dev/null

echo -e "${YELLOW}-Set time zone ${NORMAL}"
timedatectl set-timezone Europe/Luxembourg

echo -e "${YELLOW}-Generating a bluetooth verification code ${NORMAL}"

IFS='-' read -r -a serial_segments <<< "$serial_number"

mod="${serial_segments[1]}"

python3 /usr/moduline/python/btKeyGen.py > /dev/null

echo -e "${YELLOW}-Fix network manager connections ${NORMAL}"

if [ ! -f "/etc/NetworkManager/system-connections/Wired connection auto.nmconnection" ]
then
	 nmcli con mod "Wired connection 1" con-name "Wired connection auto" > /dev/null
fi

if [ ! -f "/etc/NetworkManager/system-connections/Wired connection static.nmconnection" ]
then
	nmcli con add type ethernet con-name "Wired connection static" ifname eth0 ipv4.addresses 192.168.255.255/16 ipv4.method manual connection.autoconnect no > /dev/null
fi

nmcli con delete GOcontroll-AP
nmcli con add type wifi con-name "GOcontroll-AP" ifname wlan0 ssid GOcontroll-AP-$mod ipv4.addresses 192.168.19.85/16 ipv4.method manual connection.autoconnect yes 802-11-wireless.mode ap 802-11-wireless.band bg wifi-sec.psk Moduline 802-11-wireless-security.key-mgmt wpa-psk > /dev/null


if [ ! -f "/etc/NetworkManager/system-connections/GO-cellular.nmconnection" ]
then
	nmcli con add type gsm ifname 'cdc-wdm0' con-name 'GO-cellular' apn 'super' connection.autoconnect yes gsm.pin 0000 connection.autoconnect-retries 0
fi

echo -e "${YELLOW}-Gathering module configuration and updating outdated modules ${NORMAL}"

go-modules update all

echo -e "${YELLOW}-Setting the bluetooth name and patching the go-auto-shutdown service${NORMAL}"

hw=$(tr -d '\0' </sys/firmware/devicetree/base/hardware)
case $hw in

	*IV*)
		echo -e "${YELLOW}-Applying IV specific actions ${NORMAL}"
		echo PRETTY_HOSTNAME="GOcontroll-Moduline IV $mod" > /etc/machine-info
		sed -i "s/controllerType/0/g" /lib/systemd/system/go-auto-shutdown.service
		;;
	*Mini*)
		echo -e "${YELLOW}-Applying Mini specific actions ${NORMAL}"
		echo PRETTY_HOSTNAME="GOcontroll-Moduline Mini $mod" > /etc/machine-info
		sed -i "s/controllerType/1/g" /lib/systemd/system/go-auto-shutdown.service
		patch /usr/node-red-gocontroll/nodes/bridge_module.html ~/GOcontroll/GOcontroll*/patch/bridge_module_html.patch > /dev/null
		patch /usr/node-red-gocontroll/nodes/output_module.html ~/GOcontroll/GOcontroll*/patch/output_module_html.patch > /dev/null
		patch /usr/node-red-gocontroll/nodes/input_module_reset.html ~/GOcontroll/GOcontroll*/patch/input_module_reset_html.patch > /dev/null
		patch /usr/node-red-gocontroll/nodes/input_module.html ~/GOcontroll/GOcontroll*/patch/input_module_html.patch > /dev/null
		patch /usr/node-red-gocontroll/nodes/can_receive.html ~/GOcontroll/GOcontroll*/patch/can_receive_html.patch > /dev/null
		patch /usr/node-red-gocontroll/nodes/can_send.html ~/GOcontroll/GOcontroll*/patch/can_send_html.patch > /dev/null
		patch /etc/network/interfaces ~/GOcontroll/GOcontroll*/patch/interfaces.patch > /dev/null
		;;
	*Display*)
		echo -e "${YELLOW}-Applying Display specific actions ${NORMAL}"
		echo PRETTY_HOSTNAME="GOcontroll-Moduline Display $mod" > /etc/machine-info
		sed -i "s/controllerType/2/g" /lib/systemd/system/go-auto-shutdown.service
		sed -i "s/WWAN_SETTINGS=True/WWAN_SETTINGS=False/g" /usr/moduline/python/rfcommServerConfig.py
		nmcli con delete GO-cellular
		patch /etc/network/interfaces ~/GOcontroll/GOcontroll*/patch/interfaces.patch > /dev/null
esac


echo -e "${YELLOW}-Fixing the bluetooth mac address ${NORMAL}"

sed -i "s/macplaceholder/43:43:A1:12:1F:$(openssl rand -hex 1)/g" /usr/moduline/bash/go-bluetooth-start.sh

cd

sync

rm -r /root/GOcontroll

chown GOcontroll:GOcontroll -R /home/GOcontroll

echo -e "${YELLOW}-Controller ready ${NORMAL}"
echo -e "${YELLOW}-A quick reboot is advised ${NORMAL}"

head -c -1 /sys/class/net/eth0/address | qrencode -t ansiutf8
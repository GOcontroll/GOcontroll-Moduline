#!/bin/bash

# url to bash this script:
# curl is not always installed so second command is based on wget
# bash <(curl -sL https://raw.githubusercontent.com/Rick-GO/GOcontroll-Moduline/master/installer/gocontroll-first-install-master)
# wget -O - https://raw.githubusercontent.com/Rick-GO/GOcontroll-Moduline/master/installer/gocontroll-first-install-master | bash

YELLOW='\033[33m'
NORMAL='\033[0m'

# starting with updating the repositories
echo -e "${YELLOW} Update repositories before we do a system update ${NORMAL}"
apt-get update

# Jump to root folder
cd 

# check if the GOcontroll folder on root already exists. If existing, delete
if [ -d GOcontroll ]
then
echo -e "${YELLOW} Delete existing GOcontroll folder ${NORMAL}"
	rm -r GOcontroll
fi

# Create ne empty GOcontroll folder
echo -e "${YELLOW} Create new GOcontroll folder ${NORMAL}"
mkdir GOcontroll

# Jump to GOcontroll folder
cd GOcontroll
ls

# Stop node-red service before going further
echo -e "${YELLOW}Stop Node-RED ${NORMAL}"
systemctl stop nodered

# Check if git is already installed on the system
if ! [ -x "$(command -v git)" ]; then
echo -e "${YELLOW} Git is not yet installed so let's install first ${NORMAL}"
apt-get -y install git 
fi

# Download the GOcontroll Moduline GIT repository:
echo -e "${YELLOW} Download files for GOcontroll Moduline III ${NORMAL}"
git clone https://github.com/Rick-GO/GOcontroll-Moduline.git


echo -e "${YELLOW}Install hostapd ${NORMAL}"
apt-get -y install hostapd

echo -e "${YELLOW}Install dnsmasq ${NORMAL}"
echo -e "${YELLOW}delete config file if present ${NORMAL}"
rm /etc/dnsmasq.conf

apt-get -y install dnsmasq

echo -e "${YELLOW}Install libqmi tools ${NORMAL}"
apt-get -y install libqmi-utils

echo -e "${YELLOW}Install udhcpc ${NORMAL}"
apt-get -y install udhcpc

echo -e "${YELLOW}Install curl ${NORMAL}"
apt-get -y install curl

echo -e "${YELLOW}Install SSHD ${NORMAL}"
apt-get -y install openssh-client openssh-server

echo -e "${YELLOW}Install openVPN client software ${NORMAL}"
apt-get -y install openvpn

# rng-tools fixes a problem with excessive kernel boot delay
echo -e "${YELLOW}Install rng-tools ${NORMAL}"
apt-get -y install rng-tools

cd ~

curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh

bash nodesource_setup.sh

apt-get -y install nodejs

apt-get -y install build-essential

npm cache clean -f

npm install -g n

n stable

npm install -g --unsafe-perm node-red

echo -e "${YELLOW}Start Node RED to generate root folder ${NORMAL}"
timeout 20 node-red

npm install -g node-red-admin

wget https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/nodered.service -O /lib/systemd/system/nodered.service

wget https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/node-red-start -O /usr/bin/node-red-start

wget https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/node-red-stop -O /usr/bin/node-red-stop

chmod +x /usr/bin/node-red-st*

systemctl daemon-reload

echo -e "${YELLOW}Copy specific files to Platform ${NORMAL}"

## Her we create folder(s) to stoe new custom files in ##

if [ -d /usr/scripts ]
then
echo -e "${YELLOW} Delete existing /usr/scripts folder ${NORMAL}"
	rm -r /usr/scripts
fi

# Create Folder
echo -e "${YELLOW} Create new /usr/scripts folder ${NORMAL}"
mkdir /usr/scripts

## Store the new folders/files

cp -avr /root/GOcontroll/GOcontroll-Moduline/lib /
cp -avr /root/GOcontroll/GOcontroll-Moduline/services/nodered.service /lib/systemd/system
cp -avr /root/GOcontroll/GOcontroll-Moduline/services/gocontroll.service /lib/systemd/system
cp -avr /root/GOcontroll/GOcontroll-Moduline/scripts/simulink.sh /usr/scripts/
## Assign executable rights to file
chmod 777 /usr/scripts/simulink.sh

cp -avr /root/GOcontroll/GOcontroll-Moduline/interfaces /etc/network
cp -avr /root/GOcontroll/GOcontroll-Moduline/hostapd.conf /etc/hostapd
cp -avr /root/GOcontroll/GOcontroll-Moduline/hostapd /etc/default
cp -avr /root/GOcontroll/GOcontroll-Moduline/dnsmasq.conf /etc
cp -avr /root/GOcontroll/GOcontroll-Moduline/settings.js /root/.node-red
cp -avr /root/GOcontroll/GOcontroll-Moduline/sshd_config /etc/ssh

# Before we copy the conten tof node-red-gocontroll, we first have to delete
# the folder if present.

# Go to usr folder
cd /usr

if [ -d node-red-gocontroll ]
then
	rm -r node-red-gocontroll
fi

if [ -d node-red-static ]
then
	rm -r node-red-static
fi

# jump back to root
cd ~ 

cp -avr /root/GOcontroll/GOcontroll-Moduline/node-red-gocontroll/ /usr
cp -avr /root/GOcontroll/GOcontroll-Moduline/node-red-static /usr
cp -avr /root/GOcontroll/GOcontroll-Moduline/qmi-network-raw /usr/local/bin

chmod 777 /usr/local/bin/qmi-network-raw

echo -e "${YELLOW}Activate modules for wifi ${NORMAL}"
depmod

echo -e "${YELLOW}Activate Services for wifi ${NORMAL}"
service hostapd start
service dnsmasq start

echo -e "${YELLOW}Jump node Node RED folder on root ${NORMAL}"
cd ~/.node-red

echo -e "${YELLOW}Install local node packages ${NORMAL}"

# It seems that NPM not always installs AND builds the dependencies again. It is important to delete
# the node modules first and then also delete the package.lock.json file!
# https://stackoverflow.com/questions/18401606/npm-doesnt-install-module-dependencies

npm install --unsafe-perm /usr/node-red-gocontroll

echo -e "${YELLOW}Install extra webpackages ${NORMAL}"
npm install node-red-dashboard

echo -e "${YELLOW}Start Node-RED service ${NORMAL}"
systemctl enable nodered.service 

# Make some files executable so Linux can start and execute these files themselve
chmod 777 /usr/scripts/simulink.sh

echo -e "${YELLOW}Reboot ${NORMAL}"
reboot

#!/bin/bash

# url to bash this script:
# wget -O - https://raw.githubusercontent.com/Rick-GO/GOcontroll-Moduline/master/installer/gocontroll-install | bash -s <branch>

YELLOW='\033[33m'
NORMAL='\033[0m'

# starting with updating the repositories
echo -e "${YELLOW} Update repositories before we do a system update ${NORMAL}"
apt-get update

# Jump to root folder
cd 

# check if the GOcontroll folder on root already exists. If existing, delete
if [ -d GOcontroll ]
then
echo -e "${YELLOW} Delete existing GOcontroll folder ${NORMAL}"
	rm -r GOcontroll
fi

# Create ne empty GOcontroll folder
echo -e "${YELLOW} Create new GOcontroll folder ${NORMAL}"
mkdir GOcontroll

# Jump to GOcontroll folder
cd GOcontroll
ls

# Stop node-red service before going further
echo -e "${YELLOW}Stop Node-RED ${NORMAL}"
systemctl stop nodered

# Check if git is already installed on the system
if ! [ -x "$(command -v git)" ]; then
echo -e "${YELLOW} Git is not yet installed so let's install first ${NORMAL}"
apt-get -y install git 
fi

# Download the GOcontroll Moduline GIT repository:
echo -e "${YELLOW} Download files for GOcontroll Moduline ${NORMAL}"
git clone https://github.com/Rick-GO/GOcontroll-Moduline.git --branch $1

echo -e "${YELLOW}Install hostapd ${NORMAL}"
apt-get -y install hostapd

echo -e "${YELLOW}Delete dnsmasq.conf if present ${NORMAL}"
rm /etc/dnsmasq.conf

echo -e "${YELLOW}Install dnsmasq ${NORMAL}"
apt-get -y install dnsmasq

echo -e "${YELLOW}Install libqmi tools ${NORMAL}"
apt-get -y install libqmi-utils

echo -e "${YELLOW}Install udhcpc ${NORMAL}"
apt-get -y install udhcpc

echo -e "${YELLOW}Install curl ${NORMAL}"
apt-get -y install curl

echo -e "${YELLOW}Install SSHD ${NORMAL}"
apt-get -y install openssh-client openssh-server

echo -e "${YELLOW}Install openVPN client software ${NORMAL}"
apt-get -y install openvpn

# rng-tools fixes a problem with excessive kernel boot delay
echo -e "${YELLOW}Install rng-tools ${NORMAL}"
apt-get -y install rng-tools

cd ~

echo -e "${YELLOW}Install nodesource ${NORMAL}"
curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh
bash nodesource_setup.sh

echo -e "${YELLOW}Install nodeJS ${NORMAL}"
apt-get -y install nodejs

echo -e "${YELLOW}Install build essentials ${NORMAL}"
apt-get -y install build-essential


npm cache clean -f
npm install -g n
n stable

echo -e "${YELLOW}Install Node RED ${NORMAL}"
npm install -g --unsafe-perm node-red

echo -e "${YELLOW}Start Node RED to generate root folder ${NORMAL}"
timeout 20 node-red

echo -e "${YELLOW}Install Node RED admin package ${NORMAL}"
npm install -g node-red-admin

echo -e "${YELLOW}Install Node RED systemd service ${NORMAL}"
wget https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/nodered.service -O /lib/systemd/system/nodered.service

wget https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/node-red-start -O /usr/bin/node-red-start

wget https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/node-red-stop -O /usr/bin/node-red-stop

chmod +x /usr/bin/node-red-st*

echo -e "${YELLOW}Reload systemd daemon ${NORMAL}"
systemctl daemon-reload

echo -e "${YELLOW}Copy specific files to Platform ${NORMAL}"

## Here we create folder(s) to store new custom files in ##

#if [ -d /usr/scripts ]
#then
#echo -e "${YELLOW} Delete existing /usr/scripts folder ${NORMAL}"
#	rm -r /usr/scripts
#fi

# Create scripts Folder
#echo -e "${YELLOW} Create new /usr/scripts folder ${NORMAL}"
#mkdir /usr/scripts

#if [ -d /usr/scripts ]
#then
#echo -e "${YELLOW} Delete existing /usr/moduline folder ${NORMAL}"
#	rm -r /usr/moduline
#fi

# Create moduline Folder
#echo -e "${YELLOW} Create new /usr/moduline folder ${NORMAL}"
#mkdir /usr/moduline

## Store the new folders/files
cp -avr /root/GOcontroll/GOcontroll-Moduline/lib /
cp -avr /root/GOcontroll/GOcontroll-Moduline/etc /
cp -avr /root/GOcontroll/GOcontroll-Moduline/usr /
cp -avr /root/GOcontroll/GOcontroll-Moduline/root /

## Assign executable rights to file
chmod 755 /usr/scripts/simulink.sh
chmod 755 /usr/scripts/simcomstart.sh
chmod 755 /usr/local/bin/qmi-network-raw
chmod 755 /usr/moduline/simcomstart.hex
chmod 755 /usr/moduline/simcomstop.hex


# Before we copy the conten tof node-red-gocontroll, we first have to delete
# the folder if present.

# Go to usr folder
#cd /usr

#if [ -d node-red-gocontroll ]
#then
#	rm -r node-red-gocontroll
#fi

#if [ -d node-red-static ]
#then
#	rm -r node-red-static
#fi

# jump back to root
#cd ~ 

#cp -avr /root/GOcontroll/GOcontroll-Moduline/qmi-network-raw /usr/local/bin


echo -e "${YELLOW}Activate modules for wifi ${NORMAL}"
depmod

echo -e "${YELLOW}Activate Services for wifi ${NORMAL}"
service hostapd start
service dnsmasq start

echo -e "${YELLOW}Jump node Node RED folder on root ${NORMAL}"
cd ~/.node-red

echo -e "${YELLOW}Install local node packages ${NORMAL}"

# It seems that NPM not always installs AND builds the dependencies again. It is important to delete
# the node modules first and then also delete the package.lock.json file!
# https://stackoverflow.com/questions/18401606/npm-doesnt-install-module-dependencies

npm install --unsafe-perm /usr/node-red-gocontroll

echo -e "${YELLOW}Install Node-RED dashboard ${NORMAL}"
npm install node-red-dashboard

echo -e "${YELLOW}Enable Node-RED service ${NORMAL}"
systemctl enable nodered.service 

echo -e "${YELLOW}Enable SIMCOM device service ${NORMAL}"
systemctl enable simcom.service 

echo -e "${YELLOW}Reboot controller ${NORMAL}"
reboot
